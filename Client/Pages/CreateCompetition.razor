@page "/new-competition"
@attribute [Authorize]

@inject NavigationManager navigation
@inject CompetitionsService competitionsService

<PageHeader headerText="Create a new Competition" />

<div class="row">
    <div class="col-12">
        <div class="card shadow">
            <div class="card-body">
                <EditForm Model="@competition" OnValidSubmit="HandleSubmit">
                    <div class="form-group row">
                        <div class="col-12">
                            <label>Name</label>
                            <InputText @bind-Value="competition.Name" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-12">
                            <label>Start Date</label>
                            <InputDate @bind-Value="competition.StartDate" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-12">
                            <label>Number of Weeks</label>
                            <InputNumber @bind-Value="competition.NumberOfWeeks" @oninput="HandleWeekChange" class="form-control" min="1" max="52" step="1" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-12">
                            <label>End Date</label>
                            <InputDate @bind-Value="competition.EndDate" class="form-control" readonly />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-12">
                            <label>Play In Amount</label>
                            <InputNumber @bind-Value="competition.PlayInAmount" class="form-control" step="0.01" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-6">
                            <button @onclick='() => navigation.NavigateTo("/")' class="btn btn-secondary btn-block"
                                    type="reset">
                                Cancel
                            </button>
                        </div>
                        <div class="col-6">
                            <button class="btn btn-success btn-block" type="submit">
                                @if (isFormSubmitting)
                                {
                                    <span class="spinner-border spinner-border-sm"></span><span> Submitting</span>
                                }
                                else
                                {
                                    <span>Submit</span>
                                }
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string userId { get; set; }
    private string username { get; set; }
    private Competition competition { get; set; } = new Competition();

    private bool isFormSubmitting { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == "sub").Value;
            username = user.FindFirst(c => c.Type == "name").Value;
        }
    }

    private void HandleWeekChange(ChangeEventArgs e)
    {
        competition.EndDate = competition.StartDate.AddDays(int.Parse(e.Value.ToString()) * 7);
    }

    private async Task HandleSubmit()
    {
        isFormSubmitting = true;
        competition.CreatedBy = username;
        competition.CreatedByUserId = userId;

        competition = await competitionsService.PostCompetition(competition);
        navigation.NavigateTo($"competition-detail/{competition.CompetitionId}");
    }
}
