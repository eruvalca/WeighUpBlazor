@page "/new-competition"
@attribute [Authorize]

@inject NavigationManager navigation
@inject CompetitionsService competitionsService

<PageHeader headerText="Create a new Competition" />

<EditForm Model="@competition" OnValidSubmit="HandleSubmit">
    <div class="row">
        <div class="col-12 col-md-6">
            <div class="card shadow">
                <div class="card-header">
                    <h5>Enter details</h5>
                </div>
                <div class="card-body">
                    <div class="form-group row">
                        <div class="col-12">
                            <label>Name</label>
                            <InputText @bind-Value="competition.Name" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-12">
                            <label>Start Date</label>
                            <InputDate @bind-Value="startDate" class="form-control" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-12">
                            <label>Number of Weeks</label>
                            <InputNumber @bind-Value="competition.NumberOfWeeks" @oninput="HandleWeekChange" class="form-control" min="1" max="52" step="1" />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-12">
                            <label>End Date</label>
                            <InputDate @bind-Value="competition.EndDate" class="form-control" readonly />
                        </div>
                    </div>
                    <div class="form-group row">
                        <div class="col-12">
                            <label>Play In Amount</label>
                            <InputNumber @bind-Value="competition.PlayInAmount" class="form-control" step="0.01" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12 col-md-6">
            <div class="card shadow">
                <div class="card-header">
                    <h5>Pick your weigh-in dates</h5>
                </div>
                <div class="card-body">
                    @foreach (var deadline in competition.WeighInDeadlines.OrderBy(w => w.DeadlineDate))
                    {
                        @if (deadline.DeadlineDate == competition.StartDate || deadline.DeadlineDate == competition.EndDate)
                        {
                            <div class="form-group row">
                                <div class="col-12">
                                    <div class="form-check">
                                        <InputCheckbox @bind-Value="deadline.IsActive" class="form-check-input" disabled />
                                        <label class="form-check-label">@deadline.DeadlineDate.ToShortDateString()</label>
                                    </div>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group row">
                                <div class="col-12">
                                    <div class="form-check">
                                        <InputCheckbox @bind-Value="deadline.IsActive" class="form-check-input" />
                                        <label class="form-check-label">@deadline.DeadlineDate.ToShortDateString()</label>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="form-group row">
        <div class="col-6">
            <button @onclick='() => navigation.NavigateTo("/")' class="btn btn-secondary btn-block"
                    type="reset">
                Cancel
            </button>
        </div>
        <div class="col-6">
            <button class="btn btn-success btn-block" type="submit">
                @if (isFormSubmitting)
                {
                    <span class="spinner-border spinner-border-sm"></span><span> Submitting</span>
                }
                else
                {
                    <span>Submit</span>
                }
            </button>
        </div>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private string userId { get; set; }
    private string username { get; set; }
    private DateTime _startDate;
    private DateTime startDate
    {
        get { return _startDate; }
        set
        {
            _startDate = value;
            HandleStartDateChange();
        }
    }
    private Competition competition { get; set; } = new Competition();

    private bool isFormSubmitting { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        competition.WeighInDeadlines = new List<WeighInDeadline>()
{
            new WeighInDeadline()
            {
                DeadlineDate = competition.StartDate,
                IsActive = true,
                CompetitionId = competition.CompetitionId
            },
            new WeighInDeadline()
            {
                DeadlineDate = competition.EndDate,
                IsActive = true,
                CompetitionId = competition.CompetitionId
            }
        };

        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(c => c.Type == "sub").Value;
            username = user.FindFirst(c => c.Type == "name").Value;
        }
    }

    private void HandleStartDateChange()
    {
        competition.StartDate = startDate;
        competition.EndDate = competition.StartDate.AddDays(competition.NumberOfWeeks * 7);

        competition.WeighInDeadlines = new List<WeighInDeadline>()
        {
            new WeighInDeadline()
            {
                DeadlineDate = competition.StartDate,
                IsActive = true,
                CompetitionId = competition.CompetitionId
            },
            new WeighInDeadline()
            {
                DeadlineDate = competition.EndDate,
                IsActive = true,
                CompetitionId = competition.CompetitionId
            }
        };

        for (int i = 1; i < competition.NumberOfWeeks; i++)
        {
            competition.WeighInDeadlines.Add(new WeighInDeadline()
            {
                DeadlineDate = competition.StartDate.AddDays(i * 7),
                IsActive = true,
                CompetitionId = competition.CompetitionId
            });
        }
    }

    private void HandleWeekChange(ChangeEventArgs e)
    {
        var numberOfWeeks = int.Parse(e.Value.ToString());
        competition.EndDate = competition.StartDate.AddDays(numberOfWeeks * 7);

        competition.WeighInDeadlines = new List<WeighInDeadline>()
        {
            new WeighInDeadline()
            {
                DeadlineDate = competition.StartDate,
                IsActive = true,
                CompetitionId = competition.CompetitionId
            },
            new WeighInDeadline()
            {
                DeadlineDate = competition.EndDate,
                IsActive = true,
                CompetitionId = competition.CompetitionId
            }
        };

        for (int i = 1; i < numberOfWeeks; i++)
        {
            competition.WeighInDeadlines.Add(new WeighInDeadline()
            {
                DeadlineDate = competition.StartDate.AddDays(i * 7),
                IsActive = true,
                CompetitionId = competition.CompetitionId
            });
        }
    }

    private async Task HandleSubmit()
    {
        isFormSubmitting = true;
        competition.CreatedBy = username;
        competition.CreatedByUserId = userId;

        competition = await competitionsService.PostCompetition(competition);
        navigation.NavigateTo($"competition-detail/{competition.CompetitionId}");
    }
}
